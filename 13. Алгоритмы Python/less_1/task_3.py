"""
Задание 3.

Для этой задачи:
1) придумайте 1-3 решения (желательно хотя бы два)
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Если у вас возникают сложности, постарайтесь подумать как можно решить задачу,
а не писать "мы это не проходили)".
Алгоритмизатор должен развивать мышление, а это прежде всего практика.
А без столкновения со сложностями его не развить.


Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.
"""

""" 
1.Решение 1: Перебрать словарь, все значения с ключом cost в отдельный список,
удаляем все минимальные элементы до тех пор пока не останется топ-3, сравниваем значение
из списка со значениями словаря по ключу
"""
firm_list = [
	{'name': 'Apple', 'cost': 20783},
	{'name':'Google','cost':20532},
	{'name':'Mail','cost':15089},
	{'name':'Facebook','cost':18953},
	{'name':'Yandex','cost':15321},
	{'name':'Amazon','cost':19845}
	]

# Преобразовали значения прибыли из словаря в список
gen_list = [((elem.get('cost'))) for elem in firm_list]	#O(n)
# top=[]
# Отобрали только топ-3 по прибыли	
gen = sorted(gen_list,reverse=True)[0:3]				#O(NlogN)
# print(gen)
for element in firm_list:								#O(2n^2)
	for key, val in element.items():
		# print(val)
		if val in gen:
			print('{} - {}'.format(key,val))
# !!! Сложность: 2n^2

#Решение 2

res =[]
for el in firm_list:	#O(n)
	s = list(el.items())
	res.append(s)
res.sort(key=lambda i:i[1], reverse=True) # O(n)
print(res[:3])
#!!! Сложность O(n)





























